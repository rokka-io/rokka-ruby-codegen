=begin
#rokka.io

#digital image processing done right. [Documentation](https://rokka.io/documentation). [Changelog](https://api.rokka.io/changelog.md).

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::SourceimagesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'SourceimagesApi' do
  before do
    # run before each test
    @instance = SwaggerClient::SourceimagesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SourceimagesApi' do
    it 'should create an instance of SourceimagesApi' do
      expect(@instance).to be_instance_of(SwaggerClient::SourceimagesApi)
    end
  end

  # unit tests for create_source_image
  # Upload new source images.
  # The request is form data for the uploaded files and arrays of metadata. Files and metadata are matched based on their order in the request.  Note that this call allows to upload multiple images, but the swagger UI does not support this.
  # @param filedata The binary images
  # @param organization 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :meta_dynamic JSON metadata about the image, e.g. subject area. See https://rokka.io/documentation/references/dynamic-metadata.html
  # @option opts [String] :meta_user User specific JSON metadata that can be used when searching source images. See https://rokka.io/documentation/references/user-metadata.html
  # @return [ListSourceImagesResponse]
  describe 'create_source_image test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_source_image_meta_dynamic_with_name
  # Adds or updates a specific dynamic meta data for an image.
  # This changes the hash of the image. The response provides the new location of the image in the Location header.
  # @param meta_dynamic_definition Dynamic Meta Data definition
  # @param organization 
  # @param hash 
  # @param meta_name 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :delete_previous If the image with the original hash should be deleted
  # @return [SourceImage]
  describe 'create_source_image_meta_dynamic_with_name test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_source_image_meta_user
  # Replace the image meta data with new information.
  # All existing meta data for the image is removed and then the new meta data is added.  User metadata is used for searching images that have been stored in rokka. It will never lead to differences in the output image and thus changing it never leads to a new hash.
  # @param user_meta_data User Meta Data as a json hashmap
  # @param organization 
  # @param hash 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'create_source_image_meta_user test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_source_image_meta_user_wth_name
  # Adds or updates one user meta data field for an image.
  # User metadata is used for searching images that have been stored in rokka. It will never lead to differences in the output image and thus changing it never leads to a new hash.
  # @param user_meta_data_single_field User Meta Data for a single field in json format
  # @param organization 
  # @param hash 
  # @param meta_name 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'create_source_image_meta_user_wth_name test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_source_image
  # Delete a single source image.
  # 
  # @param organization 
  # @param hash 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_source_image test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_source_image_meta_dynamic_with_name
  # Deletes a specific dynamic meta data.
  # This changes the hash of the image. The response provides the new location of the image in the Location header.
  # @param organization 
  # @param hash 
  # @param meta_name 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :delete_previous If the image with the original hash should be deleted
  # @return [SourceImage]
  describe 'delete_source_image_meta_dynamic_with_name test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_source_image_meta_user
  # Deletes all user meta data.
  # User metadata is used for searching images that have been stored in rokka. It will never lead to differences in the output image and thus changing it never leads to a new hash.
  # @param organization 
  # @param hash 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_source_image_meta_user test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_source_image_meta_user_with_name
  # Deletes user meta data for a specified field.
  # User metadata is used for searching images that have been stored in rokka. It will never lead to differences in the output image and thus changing it never leads to a new hash.
  # @param organization 
  # @param hash 
  # @param meta_name 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_source_image_meta_user_with_name test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for download_source_image
  # Download original source image binary.
  # 
  # @param organization 
  # @param hash 
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'download_source_image test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_source_image
  # Get information about a source image.
  # 
  # @param organization 
  # @param hash 
  # @param [Hash] opts the optional parameters
  # @return [SourceImage]
  describe 'get_source_image test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_source_image_meta_user
  # Get all user meta data.
  # 
  # @param organization 
  # @param hash 
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'get_source_image_meta_user test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_source_image_meta_user_with_name
  # Get user meta for a specific field.
  # 
  # @param organization 
  # @param hash 
  # @param meta_name 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'get_source_image_meta_user_with_name test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_source_images
  # Get all images of an organization, with paging.
  # You can also filter and sort by their metadata. See the API reference for more in depth documentation about this.
  # @param organization 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :offset When paging results, where to start or a cursor
  # @option opts [Integer] :limit How many images should be returned
  # @option opts [String] :sort The field to be used for sorting
  # @option opts [BOOLEAN] :deleted Search for deleted images
  # @return [ListSourceImagesResponse]
  describe 'list_source_images test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_source_images_by_binary_hash
  # Get all images in this organization that match a binaryhash.
  # The binary hash is the sha1 of the image binary. This may yield several results if the same image has been uploaded with varying dynamic metadata.
  # @param organization 
  # @param binary_hash 
  # @param [Hash] opts the optional parameters
  # @return [ListSourceImagesResponse]
  describe 'list_source_images_by_binary_hash test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_source_image_meta_user
  # Update the specified meta data fields for an image.
  # This only overwrites the fields specified in the request, but leaves existing meta data with different names unchanged.  User metadata is used for searching images that have been stored in rokka. It will never lead to differences in the output image and thus changing it never leads to a new hash.
  # @param user_meta_data User Meta Data as a json hashmap
  # @param organization 
  # @param hash 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'patch_source_image_meta_user test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for restore_source_image
  # Restore source image including previously set metadata.
  # If the image has been deleted but not yet purged from the system, it is restored. If an image with this hash already exists and is not deleted, information about that image is returned.
  # @param organization 
  # @param hash 
  # @param [Hash] opts the optional parameters
  # @return [SourceImage]
  describe 'restore_source_image test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sourceimages_organization_hash_copy_post
  # Copy a single source image to another org.
  # The metadata is copied as well. After copying, changes to either image metadata are not reflected in the other image metadata.  This is a proxy method for COPY on /sourceimages/{organization}/{hash}. It allows to copy images with a POST request, to work around restrictive firewalls and allows to produce a swagger specification for this operation.
  # @param destination The destination organization
  # @param organization 
  # @param hash 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :overwrite If set to &#39;F&#39;, existing images won&#39;t be overwritten.
  # @return [nil]
  describe 'sourceimages_organization_hash_copy_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
